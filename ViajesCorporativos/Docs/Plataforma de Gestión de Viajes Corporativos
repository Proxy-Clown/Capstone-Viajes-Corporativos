 *Plataforma de Gestión de Viajes Corporativos*
<!-- Idea general para comenzar a armar el proyecto -->


El proyecto estará levantado bajo el dominio de "https://proxyportfolio.space/", mientras que el host estará en BanaHost, donde se subirán los últimos cambios del proyecto y se mantendrán actualizados para visualizar durante todo el día, permitiendo también integrar una BDD MySQL, y facilitando el desarrollo del proyecto, así mismo mostrar avances en tiempo real.

 **Roles**

1. **Empleado Viajero**

   * Solicita viajes y registra gastos (ej: taxi, hotel, alimentación).
   * Sube comprobantes (PDF, foto de boleta).
   * Consulta historial de viajes.

2. **Jefe de Área**

   * Revisa y aprueba solicitudes de viaje.
   * Autoriza o rechaza reembolsos de gastos.

3. **Administración / Finanzas**

   * Gestiona políticas de viaje (ej: máximo por día, destinos permitidos).
   * Genera reportes de gastos por empleado/departamento.
   * Control de presupuesto asignado a cada área.

---

  **Módulos Web**

1. **Solicitud y aprobación de viajes**

   * Formulario web para pedir viaje (origen, destino, fechas, motivo).
   * Flujo de aprobación multinivel (empleado → jefe → finanzas).

2. **Gestión de gastos y viáticos**

   * Registro de gastos por categoría (transporte, hotel, alimentación).
   * Subida de comprobantes.
   * Validación contra políticas de empresa (ej: máximo \$30.000 por día en alimentación).

3. **Reportes y métricas**

   * Gastos por empleado, área, destino o período de tiempo.
   * Reportes en PDF/Excel.
   * Dashboard con gráficos (ej: ranking de destinos más frecuentes).

4. **Políticas de viaje**

   * Reglas configurables (montos máximos, proveedores autorizados).
   * Alertas automáticas si se excede presupuesto.

5. **Notificaciones**

   * Correos automáticos al jefe cuando un empleado solicita viaje.
   * Recordatorios de rendición de gastos pendientes.

---

  **Stack recomendado**

* **Frontend:** React con Tailwind (SPA).
* **Backend:** Node.js (Express) o Spring Boot.
* **Base de Datos:** PostgreSQL/MySQL.
* **Autenticación:** JWT con roles.
* **Extras para destacar:**

  * Docker + despliegue en AWS/Azure.
  * Módulo de auditoría (logs de aprobaciones/rechazos/pendientes).
  * Exportación de reportes PDF/Excel.

---

 **Metodología**

1. **Kanban:**

   * Priorizas features clave (solicitud de viaje → gastos → reportes).
   * Tablero visual de tareas, flujo continuo.

---

 **Por qué conviene como proyecto de título**

✔ No es un CRUD simple, tiene **flujo de aprobación multinivel**.
✔ Mezcla **seguridad, roles, reportes, BD relacional**.
✔ Demostrable en vivo: puedes simular el ciclo completo (Empleado pide → Jefe aprueba → Finanzas paga).
✔ Apunta a empresas, o sea, es **atractivo y defendible frente a la comisión**.
